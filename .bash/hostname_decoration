#!/bin/bash

# Generates a semi-random number seeded off of the input parameter
function short_checksum(){
    number=$(echo $1 | md5sum | sed 's/[^0-9]*//g')
    number=${number:0:5}
    echo ${number#0} | sed 's/^0*//'
}

function get_hostname_color(){
    # small subset of 256 color pallate that looks good on a dark-blue-ish colorscheme
    # picked using `for i in `seq 1 15`; do echo -e "$(tput setaf $i) $i"; done`
    colors=(1 2 3 6 9 10 11 12 13 14 201 208)

    color_index=$(($RANDOM % ${#colors[*]}))
    echo -en "$(tput setaf ${colors[$color_index]})"
}

function get_hostname_underline(){
    underline=$(($RANDOM % 2 ))
    if [[ "$underline" -eq 1 ]]; then
        echo -en "$(tput smul)"
    fi
}

function get_hostname_bold(){
    bold=$(($RANDOM % 2 ))
    if [[ "$bold" -eq 1 ]]; then
        echo -en "$(tput bold)"
    fi
}

function get_hostname_emoji(){
    # small subset of 256 color pallate that looks good on a dark-blue-ish colorscheme
    # picked using `for i in `seq 1 15`; do echo -e "$(tput setaf $i) $i"; done`
    emoji=(üçâ ü•ë üå∂ üçñ üçï üç£ üçø üç∫ üç≠)

    emoji_index=$(($RANDOM % ${#emoji[*]}))
    echo -en "${emoji[$emoji_index]}"
}

function decorated_hostname(){
    # Bash $RANDOM can be seeded by setting a value to it
    RANDOM="$(short_checksum $HOSTNAME)"
    get_hostname_emoji
    # Most of the machines that I work on have unicode 8 support in their
    # locale configuration, which leads to emoji being considered as one
    # character wide. Add a space after the emoji so that the hostname isn't
    # overlapping with the emoji
    echo -en " "
    get_hostname_underline
    get_hostname_bold
    get_hostname_color
    echo -en $HOSTNAME
    unset RANDOM
}
